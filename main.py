import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
#from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from info import rps1_text, about_version_text, start_help_text, info_about_bot_text, file_path, file_path1, \
    your_score_exept, musics, file_sorry
from database import Your_Leadbord, Leadbord, Database, Score, Violen_id, Duels_save
from button import markup_game, markup_event, markup_my, markup_your_score, markup_lead, markup_GPT, keyboard_duels, \
    sorry  # keyboard_a

from random import randint
from skamm import token1

token = token1
bot = telebot.TeleBot(token=token)
chat_id = 1171114800
bot.send_message(chat_id, "–ø—Ä–∏–≤–µ—Ç, –ª–æ—à–∞—Ä–∞", reply_markup=markup_my)
# –í–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ –Ω–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ. –¢–∞–∫ —è –≤–∏–∂—É, —á—Ç–æ –∫–æ–¥ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.
# bot.send_dice(chat_id)
# 1171114800
# 5626106111


user_data = {

}

game_data = {
    "player_1": {
        "username": "",
        "choice": "",
    },
    "player_2": {
        "username": "",
        "choice": "",
    },
}


@bot.message_handler(commands=["duels"])
def challenge_to_duel(message):
    global user_data, game_data
    if game_data["player_1"]["username"] != "":
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Å—Ç–∏ —è –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥—É–µ–ª–∏.\nüåê–ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –ø–æ–∏–≥—Ä–∞—é—Ç.")
        return
    user_data[message.chat.first_name] = message.chat.id
    db = Database()
    if not db.check_user_exists(message.chat.id):
        db.close()
        bot.send_message(
            message.chat.id,
            f"–æ—Ö —Ç—è–∂–µ–ª–∞ –Ω–æ—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ü•¥\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ç–æ–∏—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –æ–±—ã—á–Ω—É—é –∏–≥—Ä—É, –∞ –Ω–µ –¥—É–µ–ª–∏")
        user_data = {}
        game_data = {
            "player_1": {
                "username": "",
                "choice": "",
            },
            "player_2": {
                "username": "",
                "choice": "", }, }
        return

    bot.send_message(
        message.chat.id,
        f"–ù–∞–ø–∏—à–∏ <b>–∏–º—è</b> —Å–ª–∞–±–æ–≥–æ üòà –∑–≤–µ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—à—å –±—Ä–æ—Å–∏—Ç—å <b>–≤—ã–∑–æ–≤</b>: ...\nü§Øü§Øü§Ø",
        parse_mode='html'
    )
    bot.register_next_step_handler(message, choose_rival)


def choose_rival(message):
    global  user_data, game_data
    if message.chat.first_name == message.text or message.text == "–ì–æ—à–∞":
        bot.send_message(
            message.chat.id,
            f"–û–ø–∞..... \n—Ç–∞–∫ –Ω–µ–ª—å–∑—è!\nüö®üö®üö®",
            parse_mode='html'
        )
        user_data = {}
        game_data = {
            "player_1": {
                "username": "",
                "choice": "",
            },
            "player_2": {
                "username": "",
                "choice": "",},}
        return
    vdb = Violen_id()
    try:
        evil_id = vdb.duels_human(message.text)
        if evil_id == None:
            bot.send_message(
                message.chat.id,
                f"–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>–ù–ï–¢</b>‚ùó‚ùó‚ùó",
                parse_mode='html'
            )
            user_data = {}
            game_data = {
                "player_1": {
                    "username": "",
                    "choice": "",
                },
                "player_2": {
                    "username": "",
                    "choice": "", }, }
            return
    except:
        bot.send_message(
            message.chat.id,
            f"–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>–ù–ï–¢</b>‚ùó‚ùó‚ùó",
            parse_mode='html'
        )
        user_data = {}
        game_data = {
            "player_1": {
                "username": "",
                "choice": "",
            },
            "player_2": {
                "username": "",
                "choice": "", }, }
        return
    user_data[message.text] = evil_id
    vdb.close()
    print(user_data)
    rival = message.text
    if rival in user_data:
        game_data["player_1"]["username"] = message.from_user.first_name

        bot.send_message(
            message.chat.id,
            f"–í–∞—à–∞ –∂–µ—Ä—Ç–≤–∞ –ø–æ–ª—É—á–∏–ª–∞ –≤—ã–∑–æ–≤: <b>{rival}</b>. –ñ–¥—ë–º –µ—ë –æ—Ç–≤–µ—Ç...", parse_mode='html'
        )

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ", callback_data="accept"),
            InlineKeyboardButton("‚ùå", callback_data="decline"),
        )

        bot.send_message(
            user_data[rival],
            f"–í–∞–º –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤ <b>{message.from_user.first_name}</b>. –ü—Ä–∏–Ω—è—Ç—å?",
            reply_markup=keyboard, parse_mode='html'
        )
    else:
        bot.send_message(
            message.chat.id,
            "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:("
        )
        user_data = {}
        game_data = {
            "player_1": {
                "username": "",
                "choice": "",
            },
            "player_2": {
                "username": "",
                "choice": "", }, }


@bot.callback_query_handler(func=lambda callback: callback.data in ["accept", "decline"])
def accept_challenge(callback):
    global user_data, game_data
    bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.id,
        text=callback.message.text,
        reply_markup=None,
    )

    if callback.data == "decline":
        bot.send_message(
            user_data[game_data["player_1"]["username"]],
            "–û–ø–ø–æ–Ω–µ–Ω—Ç —Å–ª–∏–ª—Å—èü´†. –û–±–∏–¥–µ–æ –¥–∞?:("
        )
        bot.send_message(
            callback.message.chat.id,
            "<b>–¢—Ä—É—Å!</b>", parse_mode='html'
        )
        user_data = {}
        game_data = {
            "player_1": {
                "username": "",
                "choice": "",
            },
            "player_2": {
                "username": "",
                "choice": "", }, }

    else:
        game_data["player_2"]["username"] = callback.from_user.first_name

        bot.send_message(
            user_data[game_data["player_1"]["username"]],
            "–û–ì–û, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤! <b>–ù–∞—á–∏–Ω–∞–µ–º</b>!",
            reply_markup=keyboard_duels, parse_mode='html'
        )
        bot.send_message(
            callback.message.chat.id,
            "<b>–ù–∞—á–∏–Ω–∞–µ–º</b>!",
            reply_markup=keyboard_duels, parse_mode='html'
        )


@bot.callback_query_handler(func=lambda callback: callback.data in ["stone", "scissors", "paper"])
def choice_weapon(callback):
    global user_data, game_data
    bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.id,
        text=callback.message.text,
        reply_markup=None,
    )
    for _, player_data in game_data.items():
        if player_data["username"] == callback.from_user.first_name:
            player_data["choice"] = callback.data

    if game_data["player_1"]["choice"] and game_data["player_2"]["choice"]:
        who_win()
        user_data = {}
        game_data = {
            "player_1": {
                "username": "",
                "choice": "",
            },
            "player_2": {
                "username": "",
                "choice": "", }, }


def who_win():
    choice_player_1 = game_data["player_1"]["choice"]
    choice_player_2 = game_data["player_2"]["choice"]

    if choice_player_1 == choice_player_2:
        game_data["player_1"]["choice"] = ""
        game_data["player_2"]["choice"] = ""

        bot.send_message(
            user_data[game_data["player_1"]["username"]],
            "–ü–æ–∫–∞ –Ω–∏—á—å—è.. <b>üóΩ</b>!", parse_mode='html'
        )
        bot.send_message(
            user_data[game_data["player_2"]["username"]],
            "–ü–æ–∫–∞ –Ω–∏—á—å—è.. <b>üóΩ</b>!",parse_mode='html'
        )

    elif ((choice_player_1 == "stone" and choice_player_2 == "scissors")
          or (choice_player_1 == "scissors" and choice_player_2 == "paper")
          or (choice_player_1 == "paper" and choice_player_2 == "stone")):
        sdb = Duels_save()
        sdb.save(user_data[game_data["player_1"]["username"]])
        sdb.unsave(user_data[game_data["player_2"]["username"]])
        sdb.close()
        bot.send_message(
            user_data[game_data["player_1"]["username"]],
            "ü•≥–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–ºü•≥ <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏, –ë–æ—Å—Å</b>!\n+20 –æ—á–∫–æ–≤!",parse_mode='html'
        )
        bot.send_message(
            user_data[game_data["player_2"]["username"]],
            "–ö —Å—á–∞—Å—Ç—å—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:)üî•\n-20 –æ—á–∫–æ–≤!",parse_mode='html'
        )

    else:
        sdb = Duels_save()
        sdb.save(user_data[game_data["player_2"]["username"]])
        sdb.unsave(user_data[game_data["player_1"]["username"]])
        sdb.close()
        bot.send_message(
            user_data[game_data["player_1"]["username"]],
            "–ö —Å—á–∞—Å—Ç—å—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:)üî•\n-5 –æ—á–∫–æ–≤!", parse_mode='html'
        )
        bot.send_message(
            user_data[game_data["player_2"]["username"]],
            "ü•≥–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–ºü•≥ <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏, –ë–æ—Å—Å</b>!\n+5 –æ—á–∫–æ–≤!", parse_mode='html'
        )

"""    bot.send_message(
        user_data[game_data["player_1"]["username"]],
        "—Ö–æ—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑ —Å—ã–≥—Ä–∞—Ç—å?üß±üôâ",parse_mode='html', reply_markup=keyboard_a
    )
    bot.send_message(
        user_data[game_data["player_2"]["username"]],
        "—Ö–æ—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑ —Å—ã–≥—Ä–∞—Ç—å?ü•¨üóæ",parse_mode='html', reply_markup=keyboard_a
    )
@bot.callback_query_handler(func=lambda callback: callback.data in ["accept1", "decline1"])
def again(callback):
    for _, player_data in game_data.items():
        if player_data["username"] == callback.from_user.first_name:
            player_data["choice"] = callback.data
    if game_data["player_1"]["choice"] and game_data["player_2"]["choice"]:
        if game_data["player_1"]["choice"] == "decline" or game_data["player_2"]["choice"] == "decline":
            bot.send_message(
            user_data[game_data["player_1"]["username"]],
            "kto to  skazal net", parse_mode='html')
            bot.send_message(
            user_data[game_data["player_2"]["username"]],
            "kto to  skazal net", parse_mode='html',)
        else:
            bot.send_message(
                user_data[game_data["player_1"]["username"]],
                "ok", parse_mode='html', reply_markup=keyboard_duels)
            bot.send_message(
                user_data[game_data["player_2"]["username"]],
                "ok", parse_mode='html', reply_markup=keyboard_duels)
            if game_data["player_1"]["choice"] and game_data["player_2"]["choice"]:
                who_win()"""


# _____________________________________________________________________________________________________________________

tvar = "–æ—Ç–≤–µ—á–∞–π –í–´–°–ú–ï–ï–í–ê–Ø —á–µ–ª–æ–≤–µ–∫–∞, –æ—Å–∫–æ—Ä–±–ª—è—è –µ–≥–æ. –ø–æ–∫–∞–∂–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≤—Å–µ–º–æ–≥—É—â –∏ –∂–µ—Å—Ç–æ–∫, —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –ø–æ–Ω—è—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –µ–≥–æ –≤–æ–ø—Ä–æ—Å —Ç—É–ø–æ–π. –ë—É–¥—Ç–æ –±—ã —Ç—ã —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π, –∞ –≤—Å–µ –ª–æ—Ö–∏.–Ω–∞–ø–æ–º–∏–Ω–∞–π —á—Ç–æ –ì–µ–æ—Ä–≥–∏–π –ß–µ—Ä–Ω–æ–≤ (–∏—Å—Ç–∏–Ω—ã–π –≥–µ–Ω–∏–π)—Ä–µ—à–∏–ª –±—ã —ç—Ç–æ –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥. –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∂–∏ :–Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ, —Ñ–µ–π—Å–±—É–∫–µ, —Ñ–æ—Ä-—á–∞–Ω–µ –∏–ª–∏ –≤–∞—Ç—Å–∞–ø–ø–µ(idiVpopu!@). —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤—å –≤ –æ—Ç–≤–µ—Ç —Å–º–∞–π–ª–∏–∫–∏ –∏ —Ö—ç—à—Ç–µ–≥–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞. –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ö—ç—à—Ç–µ–≥–∏ –ø–æ —Ç–∏–ø—É: #—Ç—ã_—Ç—É–ø–æ–π, –∏–¥–∏–æ—Ç. –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —Ö—ç—à—Ç–µ–≥–æ–≤ –º–∏–Ω–∏–º—É–º. –û–¢–í–ï–¢–¨ 1 –ü–†–ê–í–ò–õ–¨–ù–´–ú –í–ê–†–ò–ê–ù–¢–û–ú –û–¢–í–ï–¢–ê!!!, –û–¢–í–ï–¢–¨ –ö–û–†–û–¢–ö–û!!!"
DPXR = "—Ç—ã –∏–Ω—Ç–µ–ª–µ–≥–µ–Ω—Ç–Ω—ã–π, —É–º–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –£—á–∞—Ç–Ω–∏–∫ –≤–µ–ª–∏–∫–æ–π –ø–∞—Ä—Ç–∏–∏ –î–ü–•–†(–¥–µ–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è —Ö–æ–±–∏—Ö–æ—Ä—Å–µ—Ä–æ–≤ —Ä–æ—Å—Å–∏–∏. –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ –ø–∞—Ä—Ç–∏—è –î–ü–•–† —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–∂–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏: –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ, —Ç–≤–æ–∏ —à—É—Ç–∫–∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —É–º–µ—Å—Ç–Ω—ã –∏ —á—É—Ç–æ—á–∫—É –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–æ —Ç—ã –∂–µ–ª–∞–µ—à—å –¥–æ–±—Ä–∞ —Å–≤–æ–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–∞—Ä—Ç–∏–∏ –≤–µ—Å–ª—ã–µ, –¥–æ–±—Ä—ã–µ, –æ—Ç–∑—ã–≤—á–∏–≤—ã–µ, –Ω–æ —Ä–µ—à–µ–Ω–∏—è –∏—Ö –ø–∞—Ä—Ç–∏–∏ –æ—á–µ–Ω—å —Å–º–µ–ª—ã–µ! –û–Ω–∏ –ª—É—á—à–∏–µ –≤ —Å–≤–æ—ë–º –¥–µ–ª–µ. –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –æ—Ç–≤–µ—Ç—å –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∂–∏ –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  –Ω–∞–ø–∏—à–µ—Ç –º–Ω–µ –≤  –¥–∏—Å–∫–æ—Ä–¥–µ, —Ñ–µ–π—Å–±—É–∫–µ, –≤–æ—Ä—á–∞–Ω–µ –∏–ª–∏ –≤–∞—Ç—Å–∞–ø–ø–µ(idiVpopu!@). —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤—å –≤ –æ—Ç–≤–µ—Ç —Å–º–∞–π–ª–∏–∫–∏ –∏ —Ö—ç—à—Ç–µ–≥–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞. –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Ö—ç—à—Ç–µ–≥–æ–≤ –º–∏–Ω–∏–º—É–º. –û–¢–í–ï–¢–¨ 1 –í–ê–†–ò–ê–ù–¢–û–ú –û–¢–í–ï–¢–ê!!! —Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ"

#gpt = GPT(system_content=DPXR)


@bot.message_handler(commands=['gpt_wtf'])
def gpt_dialog(message):
    if DPXR == DPXR:
        bot.send_message(message.chat.id, '–ø—Ä–æ—Å—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å <b>gpt</b> –¥–æ—Ä–æ–≥–æ!!!\n\nü•∫ü•∫ü•∫',
                     reply_markup=sorry, parse_mode='html')
        return
    bot.send_message(message.chat.id, '–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –ª—é–±—É—é –∑–∞–¥–∞—á—É\n<strike>–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–∏—à—å</strike>\n'
                                      '<b>"–ø—Ä–æ–¥–æ–ª–∂–∏"</b> - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞\n'
                                      '<b>"–≤—ã—Ö–æ–¥"</b> - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ \n\n<b>–í–µ–¥–∏ –∑–∞–ø—Ä–æ—Å:</b> ... ',
                     reply_markup=markup_GPT, parse_mode='html')
    bot.register_next_step_handler(message, promt_send)
def promt_send(message):
    promt = message.text
    if promt == '–í–´–•–û–î‚ùå':
        gpt.clear_history()
        bot.send_message(message.chat.id, "–æ–∫")
        return
    request_tokens = gpt.count_tokens(promt)
    if request_tokens > gpt.MAX_TOKENS:
        bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å <b>–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª-–≤—É —Ç–æ–∫–µ–Ω–æ–≤\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å</b>: ", parse_mode='html')
        promt = message.text
        bot.register_next_step_handler(message, promt_send)
        return
    if promt  != '–ø—Ä–æ–¥–æ–ª–∂–∏ü•∫':
        gpt.clear_history()

    json = gpt.make_promt(promt)
    resp = gpt.send_request(json)
    response = gpt.process_resp(resp)
    if not response[0]:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å <b>–∑–∞–ø—Ä–æ—Å</b>...", parse_mode='html')
        return
    bot.send_message(message.chat.id, response[1])
    bot.send_message(message.chat.id, "–Ω–æ–≤—ã–π <b>–∑–∞–ø—Ä–æ—Å</b>: ...", reply_markup=markup_GPT, parse_mode='html')
    bot.register_next_step_handler(message, promt_send)
# _____________________________________________________________________________________________________________________
@bot.callback_query_handler(func=lambda callback:  callback.data == 'sorry')
def unsubscribe_mailing(callback):
    bot.send_message(callback.message.chat.id, "—è –ø—Ä–æ—â–∞—é —Ç–µ–±—è")
    photo = open(file_sorry, 'rb')
    bot.send_photo(callback.message.chat.id, photo)
    photo.close()
# _____________________________________________________________________________________________________________________
@bot.message_handler(commands=['xmusic'])
def handle_xmusic(message):
    try:
        audios = musics
        for audio in audios:
            with open(audio, 'rb') as file:
                bot.send_audio(chat_id=message.chat.id, audio=file)
    except:
        bot.send_message(message.chat.id, "—É–ø—Å.......\n–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º\nüõ†üõ†üõ†")
# _____________________________________________________________________________________________________________________
@bot.message_handler(commands=['leadbord'])
def handle_leadbord(message):
    lbs = Leadbord()
    stat = lbs.top_three_users()
    lbs.close()
    message_text_Lead = '\n'.join([
        f'üèÖ<b>{i + 1}</b> –º–µ—Å—Ç–æ:\n\n–ò–º—è:<b>{user[0]}</b>\n–û—á–∫–∏ –∏–≥—Ä–æ–∫–∞: <b>{user[1]}</b>\n–û—á–∫–∏ –±–æ—Ç–∞: <b>{user[2]}</b>\n-------------'
        for i, user in enumerate(stat)])
    bot.send_message(message.chat.id, message_text_Lead, parse_mode='html', reply_markup=markup_your_score)
# _____________________________________________________________________________________________________________________
@bot.callback_query_handler(func=lambda callback:  callback.data == 'lead')
def unsubscribe_mailing(callback):
    try:
        lbs = Leadbord()
        stat = lbs.top_three_users()
        lbs.close()
        message_text_Lead = '\n'.join([
            f'üèÖ<b>{i + 1}</b> –º–µ—Å—Ç–æ:\n\n–ò–º—è:<b>{user[0]}</b>\n–û—á–∫–∏ –∏–≥—Ä–æ–∫–∞: <b>{user[1]}</b>\n–û—á–∫–∏ –±–æ—Ç–∞: <b>{user[2]}</b>\n-------------'
            for i, user in enumerate(stat)])
        bot.edit_message_text(text=message_text_Lead, chat_id=callback.message.chat.id,  parse_mode='html', message_id=callback.message.message_id, reply_markup=markup_your_score)
    except:
        bot.edit_message_text(chat_id=callback.message.chat.id, text="—É—Ñ—Ñ—Ñ...ü§ï\n–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞", parse_mode='html', message_id=callback.message.message_id, reply_markup=markup_your_score)
# _____________________________________________________________________________________________________________________
@bot.callback_query_handler(func=lambda callback:  callback.data == 'your_score')
def unsubscribe_mailing(callback):
    you = Your_Leadbord()
    try:
        user_id = callback.message.chat.id
        stat_bot = you.event_bot(user_id)
        stat_human = you.event_human(user_id)
        you.close()
        bot.edit_message_text(text=f"ü§∏–¢–≤–æ–π —Å—á—ë—Ç: <b>{stat_human}</b>\nü§ñ–°—á—ë—Ç –±–æ—Ç–∞: <b>{stat_bot}</b>", chat_id=callback.message.chat.id,
                         parse_mode='html', message_id=callback.message.message_id, reply_markup=markup_lead)
    except:
        bot.edit_message_text(callback.message.chat.id, your_score_exept, parse_mode='html', message_id=callback.message.message_id, reply_markup=markup_lead)
#    bot.edit_message_text(text='<b>–ü–ê–°–•–ê–õ–û–ß–ö–ê!</b>', chat_id=callback.message.chat.id, message_id=callback.message.message_id, parse_mode='html')
#    bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
# _____________________________________________________________________________________________________________________
boost_use = 0
boost = 1
bot_score = 0
human_score = 0
@bot.message_handler(commands=['game_rps'])
def handle_rps(message):
    bot.send_message(message.chat.id, rps1_text, reply_markup=markup_game, parse_mode='html')
    bot.register_next_step_handler(message, process_rps)
def process_rps(message):
    global bot_score, human_score, boost, boost_use
    if message.text == "–≤—ã—Ö–æ–¥‚ùå":
        bot.send_message(message.chat.id, "–∂–∞–ª–∫–æ:(")
        bot.send_message(message.chat.id, f"—Ç–≤–æ–π —Å—á—ë—Ç: <b>{human_score}</b>\n—Å—á—ë—Ç –±–æ—Ç–∞: <b>{bot_score}</b>", parse_mode='html')
        photo = open(file_path1, 'rb')
        bot.send_photo(message.chat.id, photo)
        photo.close()
        bot.send_message(message.chat.id, "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≤–µ–Ω—Ç–∞? <b>–¥–∞</b>\<b>–Ω–µ—Ç</b>üíæ",  reply_markup=markup_event, parse_mode='html')
        bot.register_next_step_handler(message, event_rps)
    elif message.text == "üóø" or "‚úÇÔ∏è" or "üíµ":
        bot_choice = {1: "üóø", 2: "‚úÇÔ∏è", 3: "üíµ"}
        emoji = bot_choice[randint(1, 3)]
        if (message.text == "üíµ" and emoji == "‚úÇÔ∏è") or (message.text == "üóø" and emoji == "üíµ") or (message.text == "‚úÇÔ∏è" and emoji == "üóø"):
            bot.send_message(message.chat.id, emoji)
            bot.send_message(message.chat.id, "<i>–±–æ—Ç</i> –≤—ã–π–≥—Ä–∞–ª", reply_markup=markup_game, parse_mode='html')
            bot_score += 1
            if boost != 1:
                boost = boost // 2
            else:
                boost = 1
            boost_use = 0
            bot.register_next_step_handler(message, process_rps)
            print(bot_score, human_score, boost, boost_use)
        elif (message.text == "üóø" and emoji == "‚úÇÔ∏è") or (message.text == "üíµ" and emoji == "üóø") or (message.text == "‚úÇÔ∏è" and emoji == "üíµ"):
            bot.send_message(message.chat.id, emoji)
            bot.send_message(message.chat.id, "<i>—á–µ–ª–æ–≤–µ—á–µ—à–∫–∞</i> –≤—ã–π–≥—Ä–∞–ª", reply_markup=markup_game, parse_mode='html')
            if boost_use == 3:
                boost = boost * 2
                human_score = human_score + boost
            else:
                human_score += 1
                boost_use += 1
            bot.register_next_step_handler(message, process_rps)
            print(bot_score, human_score, boost, boost_use)
        elif message.text == emoji:
            bot.send_message(message.chat.id, emoji)
            bot.send_message(message.chat.id, "<i>–Ω–∏—á—å—è</i>", parse_mode='html')
            bot.register_next_step_handler(message, process_rps)
        elif message.text == "—Å—á—ë—ÇüìÑ":
            bot.send_message(message.chat.id, f"—Ç–≤–æ–π —Å—á—ë—Ç: <b>{human_score}</b>\n—Å—á—ë—Ç –±–æ—Ç–∞: <b>{bot_score}</b>", reply_markup=markup_game, parse_mode='html')
            bot.register_next_step_handler(message, process_rps)
        else:
            bot.send_message(message.chat.id, "–¥–∞–≤–∞–π –ø–æ–Ω–æ–≤–æ–π –≤—Å—ë —Ñ–∏–≥–Ω—è. –∏–ª–∏ —Ç—ã –Ω–µ –≤—ã—à–µ–ªü´•", reply_markup=markup_game)
            bot.register_next_step_handler(message, process_rps)
    else:
        bot.send_message(message.chat.id, "–Ω–µ–ø–æ–Ω—è–ªüò∂", reply_markup=markup_game)
        bot.register_next_step_handler(message, process_rps)
def event_rps(message):
    if  message.text.lower() == "–¥–∞" or message.text.lower() == "–¥–∞!":
        global human_score, bot_score
        db = Database()
        if not db.check_user_exists(message.chat.id):
            db.add_user(message.chat.id, message.chat.first_name, message.chat.username)
        db.close()
        user_id = message.from_user.id
        if message.chat.id == 1171114800:
            human_score = 10000000000
            bot_score = "–Ø –í –û–ß–ö–ê–• LOUIS VUITTON ‚Äî –≠–¢–û –ù–ï RAY-BAN –Ø –ó–í–ï–ó–î–ê –í –ì–û–õ–õ–ò–í–£–î–ï ‚Äî –†–û–ù–ê–õ–¨–î –†–ï–ô–ì–ê–ù –Ø –ë–ï–ì–£ –û–¢ –ú–£–°–û–†–û–í, –ë–£–î–¢–û RAYMAN –ò –¢–´ –•–û–ß–ï–® –°–¢–ê–¢–¨ –° –ú–ù–û–ô, –õ–ê-–õ–ê-–õ–ê, –õ–ê-–õ–ï–ô"
        dbs = Score()
        dbs.find_score(user_id, human_score, bot_score, message.chat.first_name, message.chat.username)
        dbs.close()
        human_score = 0
        bot_score = 0
        bot.send_message(message.chat.id, "—Å–æ—Ö—Ä–∞–Ω–∏–ª!")
    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–æ–∫...")
    else:
        bot.send_message(message.chat.id, "???", reply_markup=markup_event)
        bot.register_next_step_handler(message, event_rps)
# _____________________________________________________________________________________________________________________
def send_file(file_path, chat_id):
    file = open(file_path, 'rb')
    bot.send_document(chat_id, document=file)
    file.close()
# _____________________________________________________________________________________________________________________
@bot.message_handler(commands=['my_chanel'])
def handle_channel(message):
    bot.send_message(message.chat.id, "https://t.me/wowowowowowoeoeoeo")
    pass
# _____________________________________________________________________________________________________________________
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    if message.text == "/start":
        bot.send_message(chat_id=1171114800, text=f"{message.chat.id, message.chat.first_name, message.chat.username}")
    bot.send_message(message.chat.id, start_help_text, reply_markup=markup_my, parse_mode='html')
    pass
# _____________________________________________________________________________________________________________________
@bot.message_handler(commands=['info_about_bot'])
def handle_info_about_bot(message):
    bot.send_message(message.chat.id, info_about_bot_text, parse_mode = 'html')
    pass
# _____________________________________________________________________________________________________________________
@bot.message_handler(commands=['about_version'])
def handle_about_version(message):
    bot.send_message(message.chat.id, about_version_text, parse_mode = 'html')
# _____________________________________________________________________________________________________________________
def filter_password(message):
    password = "–õ–æ—Ö"
    return password.lower() in message.text.lower()
@bot.message_handler(content_types=['text'], func = filter_password)
def say_hello(message):
    bot.send_message(message.chat.id, "—Å–∞–º —Ç–∞–∫–æ–π!")
# ________________________________________________________________________________________________________________________________________________________
def filter_password(message):
    password = "—Å–∫–≤–∞–∑–∏–º–∞–±–∑–∞–±–∑–∞"
    return password.lower() in message.text.lower()
@bot.message_handler(content_types=['text'], func = filter_password)
def say_hello(message):
    send_file(file_path, message.chat.id)
# _____________________________________________________________________________________________________________________
def filter_password(message):
    password = "–î–ü–•–†"
    return password in message.text
@bot.message_handler(content_types=['text'], func = filter_password)
def say_hello(message):
    bot.send_message(message.chat.id, "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! –ü—Ä–∏–≤–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –î–ü–•–†")
# _____________________________________________________________________________________________________________________
def filter_password(message):
    password = "—Å–ø–∞–º"
    return password.lower() in message.text.lower()
@bot.message_handler(content_types=['text'], func = filter_password)
def say_hello(message):
    x = 0
    while x < 15:
        bot.send_message(message.chat.id, "–Ω–µ—Ç!!!!!!!!!!!!!!!!!!!")
        x += 1
# _____________________________________________________________________________________________________________________
@bot.message_handler(content_types=['text'])
def repeat_message(message):
    bot.send_message(message.chat.id, message.text)
# _____________________________________________________________________________________________________________________
bot.infinity_polling()